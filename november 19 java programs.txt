71.
class GfG 
{  
  
// Structure of linked list Node  
static class Node  
{  
    int data;  
    Node next,random;  
    Node(int x)  
    {  
        data = x;  
        next = random = null;  
    }  
} 
  
// Utility function to print the list.  
static void print(Node start)  
{  
    Node ptr = start;  
    while (ptr != null)  
    {  
        System.out.println("Data = " + ptr.data + 
                    ", Random = "+ptr.random.data);  
        ptr = ptr.next;  
    }  
}  
  
// This function clones a given   
// linked list in O(1) space  
static Node clone(Node start)  
{  
    Node curr = start, temp = null;  
  
    // insert additional node after  
    // every node of original list  
    while (curr != null)  
    {  
        temp = curr.next;  
  
        // Inserting node  
        curr.next = new Node(curr.data);  
        curr.next.next = temp;  
        curr = temp;  
    }  
    curr = start;  
  
    // adjust the random pointers of the  
    // newly added nodes  
    while (curr != null)  
    {  
        if(curr.next != null)  
            curr.next.random = (curr.random != null) 
                      ? curr.random.next : curr.random;  
  
        // move to the next newly added node by  
        // skipping an original node  
        curr = (curr.next != null) ? curr.next.next  
                                        : curr.next;  
    }  
  
    Node original = start, copy = start.next;  
  
    // save the start of copied linked list  
    temp = copy;  
  
    // now separate the original list and copied list  
    while (original != null && copy != null)  
    {  
        original.next = (original.next != null)?  
                    original.next.next : original.next;  
  
        copy.next = (copy.next != null) ? copy.next.next  
                                            : copy.next;  
        original = original.next;  
        copy = copy.next;  
    }  
    return temp;  
}  
  
// Driver code  
public static void main(String[] args)  
{  
    Node start = new Node(1);  
    start.next = new Node(2);  
    start.next.next = new Node(3);  
    start.next.next.next = new Node(4);  
    start.next.next.next.next = new Node(5);  
  
    // 1's random points to 3  
    start.random = start.next.next;  
  
    // 2's random points to 1  
    start.next.random = start;  
  
    // 3's and 4's random points to 5  
    start.next.next.random = start.next.next.next.next;  
    start.next.next.next.random = start.next.next.next.next;  
  
    // 5's random points to 2  
    start.next.next.next.next.random = start.next;  
  
    System.out.println("Original list : ");  
    print(start);  
  
    System.out.println("Cloned list : ");  
    Node cloned_list = clone(start);  
    print(cloned_list);  
  
} 
}  
  72.
class GFG { 
  
    static class Node { 
        int data; 
        Node next; 
    }; 
  
    // Function to create newNode in a linkedlist 
    static Node newNode(int key) 
    { 
        Node temp = new Node(); 
        temp.data = key; 
        temp.next = null; 
        return temp; 
    } 
  
    // A utility function to print linked list 
    static void printList(Node node) 
    { 
        while (node != null) { 
            System.out.printf("%d ", node.data); 
            node = node.next; 
        } 
    } 
  
    // Merges two given lists in-place. This function 
    // mainly compares head nodes and calls mergeUtil() 
    static Node merge(Node h1, Node h2) 
    { 
        if (h1 == null) 
            return h2; 
        if (h2 == null) 
            return h1; 
  
        // start with the linked list 
        // whose head data is the least 
        if (h1.data < h2.data) { 
            h1.next = merge(h1.next, h2); 
            return h1; 
        } 
        else { 
            h2.next = merge(h1, h2.next); 
            return h2; 
        } 
    } 
  
    // Driver program 
    public static void main(String args[]) 
    { 
        Node head1 = newNode(1); 
        head1.next = newNode(3); 
        head1.next.next = newNode(5); 
  
        // 1.3.5 LinkedList created 
  
        Node head2 = newNode(0); 
        head2.next = newNode(2); 
        head2.next.next = newNode(4); 
  
        // 0.2.4 LinkedList created 
  
        Node mergedhead = merge(head1, head2); 
  
        printList(mergedhead); 
    } 
} 
  
73.
public class MergeKSortedLists { 
  
    /* Takes two lists sorted in increasing order, and merge  
    their nodes together to make one big sorted list. Below  
    function takes O(Log n) extra space for recursive calls,  
    but it can be easily modified to work with same time and  
    O(1) extra space  */
    public static Node SortedMerge(Node a, Node b) 
    { 
        Node result = null; 
        /* Base cases */
        if (a == null) 
            return b; 
        else if (b == null) 
            return a; 
  
        /* Pick either a or b, and recur */
        if (a.data <= b.data) { 
            result = a; 
            result.next = SortedMerge(a.next, b); 
        } 
        else { 
            result = b; 
            result.next = SortedMerge(a, b.next); 
        } 
  
        return result; 
    } 
  
    // The main function that takes an array of lists 
    // arr[0..last] and generates the sorted output 
    public static Node mergeKLists(Node arr[], int last) 
    { 
        // repeat until only one list is left 
        while (last != 0) { 
            int i = 0, j = last; 
  
            // (i, j) forms a pair 
            while (i < j) { 
                // merge List i with List j and store 
                // merged list in List i 
                arr[i] = SortedMerge(arr[i], arr[j]); 
  
                // consider next pair 
                i++; 
                j--; 
  
                // If all pairs are merged, update last 
                if (i >= j) 
                    last = j; 
            } 
        } 
  
        return arr[0]; 
    } 
  
    /* Function to print nodes in a given linked list */
    public static void printList(Node node) 
    { 
        while (node != null) { 
            System.out.print(node.data + " "); 
            node = node.next; 
        } 
    } 
  
    public static void main(String args[]) 
    { 
        int k = 3; // Number of linked lists 
        int n = 4; // Number of elements in each list 
  
        // an array of pointers storing the head nodes 
        // of the linked lists 
        Node arr[] = new Node[k]; 
  
        arr[0] = new Node(1); 
        arr[0].next = new Node(3); 
        arr[0].next.next = new Node(5); 
        arr[0].next.next.next = new Node(7); 
  
        arr[1] = new Node(2); 
        arr[1].next = new Node(4); 
        arr[1].next.next = new Node(6); 
        arr[1].next.next.next = new Node(8); 
  
        arr[2] = new Node(0); 
        arr[2].next = new Node(9); 
        arr[2].next.next = new Node(10); 
        arr[2].next.next.next = new Node(11); 
  
        // Merge all lists 
        Node head = mergeKLists(arr, k - 1); 
        printList(head); 
    } 
} 
  
class Node { 
    int data; 
    Node next; 
    Node(int data) 
    { 
        this.data = data; 
    } 
74.
class Main 
{ 
    // Function to remove duplicate elements 
    // This function returns new size of modified 
    // array. 
    static int removeDuplicates(int arr[], int n) 
    { 
        // Return, if array is empty 
        // or contains a single element 
        if (n==0 || n==1) 
            return n; 
       
        int[] temp = new int[n]; 
          
        // Start traversing elements 
        int j = 0; 
        for (int i=0; i<n-1; i++) 
            // If current element is not equal 
            // to next element then store that 
            // current element 
            if (arr[i] != arr[i+1]) 
                temp[j++] = arr[i]; 
          
        // Store the last element as whether 
        // it is unique or repeated, it hasn't 
        // stored previously 
        temp[j++] = arr[n-1];    
          
        // Modify original array 
        for (int i=0; i<j; i++) 
            arr[i] = temp[i]; 
       
        return j; 
    } 
      
    public static void main (String[] args)  
    { 
        int arr[] = {1, 2, 2, 3, 4, 4, 4, 5, 5}; 
        int n = arr.length; 
          
        n = removeDuplicates(arr, n); 
   
        // Print updated array 
        for (int i=0; i<n; i++) 
           System.out.print(arr[i]+" "); 
    } 
} 
}
75.
public class Solution { public ListNode partition(ListNode head, int x) { if(head == null) return null;
ListNode fakeHead1 = new ListNode(0); ListNode fakeHead2 = new ListNode(0); fakeHead1.next = head;
ListNode p = head;
ListNode prev = fakeHead1; ListNode p2 = fakeHead2; while(p != null){
if(p.val < x){ p = p.next; prev = prev.next;
}else{
p2.next = p; prev.next = p.next;
p = prev.next; p2 = p2.next;
}
}
// close the list p2.next = null; prev.next = fakeHead2.next;
return fakeHead1.next;
}
}
 
76.
import java.util.HashMap;
public class LRUCache {
private HashMap<Integer, DoubleLinkedListNode> map
= new HashMap<Integer, DoubleLinkedListNode>(); private DoubleLinkedListNode head; private DoubleLinkedListNode end; private int capacity; private int len;
public LRUCache(int capacity) {
this.capacity = capacity; len = 0;
}
public int get(int key) {
if (map.containsKey(key)) {
DoubleLinkedListNode latest = map.get(key); removeNode(latest); setHead(latest); return latest.val;
} else { return -1;
} }
public void removeNode(DoubleLinkedListNode node) {
DoubleLinkedListNode cur = node;
DoubleLinkedListNode pre = cur.pre; DoubleLinkedListNode post = cur.next;
if (pre != null) {
pre.next = post;
} else { head = post;
}
77.
class LinkedList { 
    Node head; // head of list 
  
    /* Linked list Node*/
    class Node { 
        int data; 
        Node next; 
        Node(int d) 
        { 
            data = d; 
            next = null; 
        } 
    } 
  
    /* Function to get Union of 2 Linked Lists */
    void getUnion(Node head1, Node head2) 
    { 
        Node t1 = head1, t2 = head2; 
  
        // insert all elements of list1 in the result 
        while (t1 != null) { 
            push(t1.data); 
            t1 = t1.next; 
        } 
  
        // insert those elements of list2 
        // that are not present 
        while (t2 != null) { 
            if (!isPresent(head, t2.data)) 
                push(t2.data); 
            t2 = t2.next; 
        } 
    } 
  
    void getIntersection(Node head1, Node head2) 
    { 
        Node result = null; 
        Node t1 = head1; 
  
        // Traverse list1 and search each 
        // element of it in list2. 
        // If the element is present in 
        // list 2, then insert the 
        // element to result 
        while (t1 != null) { 
            if (isPresent(head2, t1.data)) 
                push(t1.data); 
            t1 = t1.next; 
        } 
    } 
  
    /* Utility function to print list */
    void printList() 
    { 
        Node temp = head; 
        while (temp != null) { 
            System.out.print(temp.data + " "); 
            temp = temp.next; 
        } 
        System.out.println(); 
    } 
  
    /*  Inserts a node at start of linked list */
    void push(int new_data) 
    { 
        /* 1 & 2: Allocate the Node & 
                  Put in the data*/
        Node new_node = new Node(new_data); 
  
        /* 3. Make next of new Node as head */
        new_node.next = head; 
  
        /* 4. Move the head to point to new Node */
        head = new_node; 
    } 
  
    /* A utilty function that returns true  
       if data is present in linked list  
       else return false */
    boolean isPresent(Node head, int data) 
    { 
        Node t = head; 
        while (t != null) { 
            if (t.data == data) 
                return true; 
            t = t.next; 
        } 
        return false; 
    } 
  
    /* Driver program to test above functions */
    public static void main(String args[]) 
    { 
        LinkedList llist1 = new LinkedList(); 
        LinkedList llist2 = new LinkedList(); 
        LinkedList unin = new LinkedList(); 
        LinkedList intersecn = new LinkedList(); 
  
        /*create a linked lits 10->15->5->20 */
        llist1.push(20); 
        llist1.push(4); 
        llist1.push(15); 
        llist1.push(10); 
  
        /*create a linked lits 8->4->2->10 */
        llist2.push(10); 
        llist2.push(2); 
        llist2.push(4); 
        llist2.push(8); 
  
        intersecn.getIntersection(llist1.head, llist2.head); 
        unin.getUnion(llist1.head, llist2.head); 
  
        System.out.println("First List is"); 
        llist1.printList(); 
  
        System.out.println("Second List is"); 
        llist2.printList(); 
  
        System.out.println("Intersection List is"); 
        intersecn.printList(); 
  
        System.out.println("Union List is"); 
        unin.printList(); 
    } }
78.
import java.io.*; 
import java.util.LinkedList; 
  
public class LinkedListDemo { 
    public static void main(String args[]) 
    { 
  
        // Creating an empty LinkedList 
        LinkedList<String> list = new LinkedList<String>(); 
  
        // Using add() method to add elements in the list 
        list.add("Geeks"); 
        list.add("for"); 
        list.add("Geeks"); 
        list.add("10"); 
        list.add("20"); 
  
        // Output the list 
        System.out.println("LinkedList:" + list); 
  
        // Remove the head using remove() 
        list.remove(); 
  
        // Print the final list 
        System.out.println("Final LinkedList:" + list); 
    } 
} 
79.
import java.io.*; 
import java.util.LinkedList; 
  
public class LinkedListDemo { 
    public static void main(String args[]) 
    { 
  
        // Creating an empty LinkedList 
        LinkedList<String> list = new LinkedList<String>(); 
  
        // Using add() method to add elements in the list 
        list.add("Geeks"); 
        list.add("for"); 
        list.add("Geeks"); 
        list.add("10"); 
        list.add("20"); 
  
        // Output the list 
        System.out.println("LinkedList:" + list); 
  
        // Remove the head using remove() 
        list.remove(); 
  
        // Print the final list 
        System.out.println("Final LinkedList:" + list); 
    } 
} 
80.
class LinkedList {
 
    static Node head;
 
    static class Node {
 
        int data;
        Node next;
 
        Node(int d)
        {
            data = d;
            next = null;
        }
    }
 
    /* Function to reverse the linked list */
    Node reverse(Node node)
    {
        Node prev = null;
        Node current = node;
        Node next = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        node = prev;
        return node;
    }
 
    // prints content of double linked list
    void printList(Node node)
    {
        while (node != null) {
            System.out.print(node.data + " ");
            node = node.next;
        }
    }
